{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/getLocaleFromPath.ts", "../src/utils/setHTMLLangAttribute.ts", "../src/utils/getPathFromUrl.ts", "../src/utils/setLangSelectorLinks.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Get the locale from the URL\n * @returns {object} locale\n */\n\ntype Locale = {\n  country: string;\n  isoCode: string;\n};\n\nexport const getLocale = function () {\n  const path = window.location.pathname.slice(1, 3);\n  let locale: Locale = { country: 'International', isoCode: 'en' };\n\n  if (path === 'no') locale = { country: 'Norway', isoCode: 'no' };\n  if (path === 'sv') locale = { country: 'Sweden', isoCode: 'sv' };\n  if (path === 'fi') locale = { country: 'Finland', isoCode: 'fi' };\n\n  return locale;\n};\n", "/**\n * @description Set the HTML lang attribute to the current locale ISO code\n * @param {string} isoCode - The locale ISO code\n */\nexport function setHTMLLangAttribute(isoCode: string) {\n  if (isoCode) document.documentElement.setAttribute('lang', isoCode);\n}\n", "/**\n * Extract the path from a URL\n * @param {string} urlString\n * @returns {string | undefined} Returns the path or undefined if the URL is invalid\n */\n\nexport function getPathFromUrl(urlString: string) {\n  try {\n    const url = new URL(urlString);\n    return url.pathname;\n  } catch (e) {\n    console.error('Could not extract path from URL');\n    return undefined;\n  }\n}\n", "import { getPathFromUrl } from './getPathFromUrl';\n\n/**\n * Set hreflang links\n */\n\ninterface hrefLangObj {\n  href: string | null;\n  hreflang: string | null;\n}\n\nexport async function setLangSelectorLinks() {\n  // links in the head of the document to add to the language switcher locale links\n  const hrefLangLinks = Array.from(document.querySelectorAll('link[hreflang]')).map((link) => {\n    const hrefLangObj: hrefLangObj = {\n      href: link.getAttribute('href'),\n      hreflang: link.getAttribute('hreflang'),\n    };\n\n    return hrefLangObj;\n  });\n\n  if (!hrefLangLinks.length) return;\n\n  // gets all locale links from language switcher\n  const langSwitchLinks = Array.from(document.querySelectorAll('[switcher-lang]'));\n  if (!langSwitchLinks.length) return;\n\n  hrefLangLinks.forEach((hrefLangObj) => {\n    const { href, hreflang } = hrefLangObj;\n\n    if (href === null || hreflang === null) return;\n\n    // find the link in the language switcher that matches the current locale\n    const langSwitchLink = langSwitchLinks.find((langSwitchLink) =>\n      langSwitchLink.getAttribute('switcher-lang')?.includes(hreflang)\n    );\n\n    if (!langSwitchLink) return;\n\n    // get the path from the hreflang link\n    const path = getPathFromUrl(href);\n    if (!path) return;\n\n    // set the locale link to the hreflang link\n    langSwitchLink.setAttribute('href', path);\n  });\n}\n", "import { getLocale } from '$utils/getLocaleFromPath';\nimport { setHTMLLangAttribute } from '$utils/setHTMLLangAttribute';\nimport { setLangSelectorLinks } from '$utils/setLangSelectorLinks';\n\nwindow.Webflow ||= [];\nwindow.Webflow.push(() => {\n  // set the HTML lang attribute to the current locale ISO code\n  const { isoCode } = getLocale();\n  setHTMLLangAttribute(isoCode);\n\n  // set the language switcher links to the existing hreflang links in the head of the document\n  setLangSelectorLinks();\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACUtF,MAAM,YAAY,WAAY;AACnC,UAAM,OAAO,OAAO,SAAS,SAAS,MAAM,GAAG,CAAC;AAChD,QAAI,SAAiB,EAAE,SAAS,iBAAiB,SAAS,KAAK;AAE/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,UAAU,SAAS,KAAK;AAC/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,UAAU,SAAS,KAAK;AAC/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,WAAW,SAAS,KAAK;AAEhE,WAAO;AAAA,EACT;;;ACfO,WAAS,qBAAqB,SAAiB;AACpD,QAAI;AAAS,eAAS,gBAAgB,aAAa,QAAQ,OAAO;AAAA,EACpE;;;ACAO,WAAS,eAAe,WAAmB;AAChD,QAAI;AACF,YAAM,MAAM,IAAI,IAAI,SAAS;AAC7B,aAAO,IAAI;AAAA,IACb,SAAS,GAAP;AACA,cAAQ,MAAM,iCAAiC;AAC/C,aAAO;AAAA,IACT;AAAA,EACF;;;ACHA,iBAAsB,uBAAuB;AAE3C,UAAM,gBAAgB,MAAM,KAAK,SAAS,iBAAiB,gBAAgB,CAAC,EAAE,IAAI,CAAC,SAAS;AAC1F,YAAM,cAA2B;AAAA,QAC/B,MAAM,KAAK,aAAa,MAAM;AAAA,QAC9B,UAAU,KAAK,aAAa,UAAU;AAAA,MACxC;AAEA,aAAO;AAAA,IACT,CAAC;AAED,QAAI,CAAC,cAAc;AAAQ;AAG3B,UAAM,kBAAkB,MAAM,KAAK,SAAS,iBAAiB,iBAAiB,CAAC;AAC/E,QAAI,CAAC,gBAAgB;AAAQ;AAE7B,kBAAc,QAAQ,CAAC,gBAAgB;AACrC,YAAM,EAAE,MAAM,SAAS,IAAI;AAE3B,UAAI,SAAS,QAAQ,aAAa;AAAM;AAGxC,YAAM,iBAAiB,gBAAgB;AAAA,QAAK,CAACA,oBAC3CA,gBAAe,aAAa,eAAe,GAAG,SAAS,QAAQ;AAAA,MACjE;AAEA,UAAI,CAAC;AAAgB;AAGrB,YAAM,OAAO,eAAe,IAAI;AAChC,UAAI,CAAC;AAAM;AAGX,qBAAe,aAAa,QAAQ,IAAI;AAAA,IAC1C,CAAC;AAAA,EACH;;;AC3CA,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM;AAExB,UAAM,EAAE,QAAQ,IAAI,UAAU;AAC9B,yBAAqB,OAAO;AAG5B,yBAAqB;AAAA,EACvB,CAAC;",
  "names": ["langSwitchLink"]
}
