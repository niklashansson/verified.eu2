{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/cmsslots/checkIfSourceExists.ts", "../src/utils/queryElements.ts", "../src/utils/cmsslots/combineSourceElements.ts", "../src/utils/cmsslots/createSlotItem.ts", "../src/utils/queryElement.ts", "../src/utils/cmsslots/createSourceElement.ts", "../src/utils/cmsslots/createSourceItem.ts", "../src/utils/cmsslots/getDataFromSourceElement.ts", "../src/utils/sortArrayByDateProp.ts", "../src/resourceSlots.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "import type { SlotItem } from './types';\n\n/**\n *\n * @param sourceSlug\n * @param slotItems\n * @returns\n */\n\nexport function checkIfSourceExists(sourceSlug: string | undefined, slotItems: SlotItem[]) {\n  return sourceSlug ? slotItems.some((slot) => sourceSlug === slot.slug) : undefined;\n}\n", "/**\n *\n * @param selector\n * @param parent\n * @returns\n */\n\nexport function queryElements<T extends HTMLElement>(\n  selector: string,\n  parent?: Element | Document\n): T[] {\n  return Array.from((parent || document).querySelectorAll(selector)) as T[];\n}\n", "import type { SourceElements } from '$utils/cmsslots/types';\nimport { sortArrayByDateProp } from '$utils/sortArrayByDateProp';\n\nimport { queryElements } from '../queryElements';\n\n/**\n * @returns { HTMLDivElement[] } returns source elements\n */\n\nexport function combineSourceElements() {\n  // select all lists with \"source-list\" (in order to get data from multiple Collection Lists)\n  const lists = Array.from(queryElements<HTMLDivElement>('[bw-cmsslots-element=\"source-list\"]'));\n  if (!lists.length) return;\n\n  const firstList = lists[0];\n\n  lists.forEach((list, i) => {\n    if (i === 0) return;\n    const elements = Array.from(list.childNodes) as HTMLDivElement[];\n    if (!elements.length) return;\n\n    elements.forEach((el) => firstList.appendChild(el));\n    list.parentElement?.remove();\n  });\n\n  // return source elements\n  const sourceElements = Array.from(firstList.childNodes) as HTMLDivElement[];\n  if (!sourceElements.length) return;\n\n  return {\n    elements: sourceElements as HTMLDivElement[],\n    parent: firstList,\n  } as SourceElements;\n}\n", "import type { SlotItem } from './types';\n\n/**\n * @description Creates Slot Item from HTML Element\n * @param {HTMLDivElement} slotEl\n * @param {number} i\n * @returns {SlotItem} Returns object with information about if it's empty or selected\n */\n\nexport function createSlotItem(slotEl: HTMLDivElement, i: number) {\n  const { caseSlug, articleSlug, newsSlug } = slotEl.dataset;\n  const slugs = [{ slug: caseSlug }, { slug: articleSlug }, { slug: newsSlug }];\n\n  const selectedSlug = slugs.find(({ slug }) => slug);\n\n  return {\n    slug: selectedSlug ? selectedSlug.slug : '',\n    index: i,\n    isPopulated: selectedSlug ? true : false,\n    element: slotEl,\n  } as SlotItem;\n}\n", "/**\n *\n * @param {string} selector\n * @param parent\n * @returns\n */\nexport function queryElement<T extends HTMLElement>(\n  selector: string,\n  parent?: HTMLElement | Document\n): T | null {\n  return (parent || document).querySelector(selector) as T | null;\n}\n", "import { queryElement } from '$utils/queryElement';\n\nimport type { SourceData } from './types';\n\nexport function createSourceElement(sourceData: SourceData, templateElement: HTMLDivElement) {\n  const newElement = templateElement.cloneNode(true) as HTMLDivElement;\n\n  const title = queryElement<HTMLDivElement>('[bw-cmsslots-data=\"title\"]', newElement);\n  const image = queryElement<HTMLImageElement>('[bw-cmsslots-data=\"thumbnail\"]', newElement);\n  const type = queryElement<HTMLDivElement>('[bw-cmsslots-data=\"type\"]', newElement);\n  const published = queryElement<HTMLDivElement>(\n    '[bw-cmsslots-data=\"published\"]',\n    newElement\n  ) as HTMLDivElement;\n  const href = queryElement<HTMLLinkElement>('[bw-cmsslots-data=\"link\"]', newElement);\n\n  title ? (title.textContent = sourceData.title) : '';\n  image ? (image.src = sourceData.img) : '';\n  type ? (type.textContent = sourceData.category) : '';\n  published && type?.textContent === 'News'\n    ? (published.textContent = sourceData.published)\n    : (published.textContent = '');\n  href ? (href.href = sourceData.slug) : '';\n\n  newElement.style.display = 'block';\n\n  return newElement;\n}\n", "import type { SourceItem } from './types';\n\n/**\n * @description Creates a SourceItem object from a div element\n * @param element\n * @param published from element dataset\n * @param slug from element dataset\n * @param shouldReplace if true then the source items element is moved to slot items element, if false new element is created and source element is removed\n * @returns {SourceItem | undefined }\n */\n\nexport function createSourceItem(\n  element: HTMLDivElement,\n  published: string,\n  slug: string,\n  shouldReplace: boolean,\n  data: any\n) {\n  if (!published || !slug) return;\n\n  return {\n    element,\n    published: new Date(published),\n    slug,\n    shouldReplace,\n    data,\n  } as SourceItem;\n}\n", "import { queryElement } from '$utils/queryElement';\n\nimport type { SourceData } from './types';\n\n/**\n * @description extract application/json data from Webflow embed from source element\n * @param sourceEl\n * @returns {SourceData}\n */\n\nexport function getDataFromSourceEl(sourceEl: HTMLDivElement) {\n  const scriptEl = queryElement<HTMLDivElement>('script[type=\"application/json\"]', sourceEl);\n  const scriptTxt = scriptEl?.textContent || undefined;\n  if (!scriptTxt) return;\n\n  return JSON.parse(scriptTxt) as SourceData;\n}\n", "/**\n * Sort an array of elements by date\n * @param {Array<any>} array Array to sort\n * @param {string} dateProp Date property to sort by\n * @param { string} order Order of the sort (asc or desc)\n */\n\nexport function sortArrayByDateProp(\n  array: Array<any>,\n  dateProp: string,\n  order: string | 'asc' | 'desc' = 'desc'\n) {\n  array.sort((a, b) => {\n    const dateA = new Date(a[dateProp]);\n    const dateB = new Date(b[dateProp]);\n\n    if (order === 'asc') {\n      return dateA.getTime() - dateB.getTime();\n    }\n\n    if (order === 'desc') {\n      return dateB.getTime() - dateA.getTime();\n    }\n\n    throw new Error('Order must be asc or desc');\n  });\n}\n", "import { checkIfSourceExists } from '$utils/cmsslots/checkIfSourceExists';\nimport { combineSourceElements } from '$utils/cmsslots/combineSourceElements';\nimport { createSlotItem } from '$utils/cmsslots/createSlotItem';\nimport { createSourceElement } from '$utils/cmsslots/createSourceElement';\nimport { createSourceItem } from '$utils/cmsslots/createSourceItem';\nimport { getDataFromSourceEl } from '$utils/cmsslots/getDataFromSourceElement';\nimport type { SlotItem, SourceData, SourceElements } from '$utils/cmsslots/types';\nimport { queryElement } from '$utils/queryElement';\nimport { sortArrayByDateProp } from '$utils/sortArrayByDateProp';\n\nwindow.Webflow = window.Webflow || [];\n\nwindow.Webflow.push(async () => {\n  // slots list element (resource positions Webflow collection list)\n  const listElement = queryElement<HTMLDivElement>('[bw-cmsslots-element=\"list\"]');\n  if (!listElement) return;\n\n  // template element if new source elements should be created\n  const templateElement =\n    queryElement<HTMLDivElement>('[bw-cmsslots-element=\"template\"]') || undefined;\n\n  // check if source items inserts new element or replaces the empty slot element\n  const shouldReplace = templateElement === undefined ? true : false;\n\n  // creates array with slot items\n  const slotItems = Array.from(listElement.childNodes).map((element, index) =>\n    createSlotItem(element as HTMLDivElement, index)\n  );\n\n  // array with empty slots that will be populated from source items\n  const emptySlots = slotItems.filter((slot) => !slot.isPopulated);\n\n  // source elements from multiple lists\n  const { elements: sourceElements, parent: sourceParentEl } =\n    combineSourceElements() as SourceElements;\n  if (!sourceElements?.length) return;\n\n  // sort elements by publish date\n\n  // create slot items from source elements\n  const sourceItems = sourceElements.map((el) => {\n    const { published, slug } = el.dataset;\n    if (!published || !slug) return;\n\n    // if new element should be created\n    const data = {};\n\n    return createSourceItem(el, published, slug, shouldReplace, data);\n  });\n\n  // sort source items by publish date and render to list\n  sortArrayByDateProp(sourceItems, 'published', 'desc');\n  sourceParentEl.innerHTML = '';\n  sourceItems.forEach((item) => {\n    if (!item?.element) return;\n    sourceParentEl.appendChild(item?.element);\n  });\n\n  // removes source items' element that already exist in slot items\n  sourceItems.forEach((item) => {\n    if (!item) return;\n    checkIfSourceExists(item.slug, slotItems) ? item.element?.remove() : undefined;\n  });\n\n  // source items filtered out by source resources that is present in any slot resource\n  const filteredSourceItems = sourceItems\n    .filter((item) => {\n      if (!item) return;\n      return !checkIfSourceExists(item.slug, slotItems);\n    })\n    .slice(0, emptySlots.length);\n\n  if (!shouldReplace) {\n    filteredSourceItems.forEach((sourceItem) => {\n      if (!sourceItem) return;\n\n      // get data from element\n      const data = getDataFromSourceEl(sourceItem.element as HTMLDivElement) as SourceData;\n\n      // create new element\n      const newEl = createSourceElement(data, templateElement as HTMLDivElement);\n\n      // remove old element\n      sourceItem.element?.remove();\n\n      // find slot item\n      const slotItem = slotItems.find((slot) => !slot.isPopulated);\n      if (!slotItem) return;\n\n      // replace slot items element with source items element\n      replaceSlotElement(newEl, slotItem);\n    });\n\n    return;\n  }\n\n  if (shouldReplace) {\n    filteredSourceItems.forEach((sourceItem) => {\n      if (!sourceItem?.element) return;\n\n      // find slot item that is not populated\n      const slotItem = slotItems.find((slot) => !slot.isPopulated);\n      if (!slotItem) return;\n\n      replaceSlotElement(sourceItem.element, slotItem);\n    });\n  }\n});\n\nfunction replaceSlotElement(element: HTMLDivElement, slotItem: SlotItem) {\n  // replace slot items element with element\n  slotItem.element.replaceWith(element);\n  // set to populated\n  slotItem.isPopulated = true;\n}\n"],
  "mappings": "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",
  "names": []
}
