{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.2/node_modules/@finsweet/ts-utils/dist/type-guards/instances.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.2/node_modules/@finsweet/ts-utils/dist/helpers/simulateEvent.js", "../node_modules/.pnpm/@finsweet+ts-utils@0.39.2/node_modules/@finsweet/ts-utils/dist/helpers/setFormFieldValue.js", "../src/utils/getLocaleFromPath.ts", "../src/forms.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * @returns `true` if the target is an instance of File type.\n * @param target\n */\nexport const isFile = (target) => target instanceof File;\n/**\n * @returns `true` if the target is an instance of Node type.\n * @param target\n */\nexport const isNode = (target) => target instanceof Node;\n/**\n * @returns `true` if the target is an instance of Element type.\n * @param target\n */\nexport const isElement = (target) => target instanceof Element;\n/**\n * @returns `true` if the target is an instance of HTMLElement type.\n * @param target\n */\nexport const isHTMLElement = (target) => target instanceof HTMLElement;\n/**\n * @returns `true` if the target is an instance of HTMLInputElement type.\n * @param target\n */\nexport const isHTMLInputElement = (target) => target instanceof HTMLInputElement;\n/**\n * @returns `true` if the target is an instance of HTMLSelectElement type.\n * @param target\n */\nexport const isHTMLSelectElement = (target) => target instanceof HTMLSelectElement;\n/**\n * @returns `true` if the target is an instance of HTMLTextAreaElement type.\n * @param target\n */\nexport const isHTMLTextAreaElement = (target) => target instanceof HTMLTextAreaElement;\n/**\n * @returns `true` if the target is an instance of HTMLVideoElement type.\n * @param target\n */\nexport const isHTMLVideoElement = (target) => target instanceof HTMLVideoElement;\n/**\n * @returns `true` if the target is an instance of HTMLAnchorElement type.\n * @param target\n */\nexport const isHTMLAnchorElement = (target) => target instanceof HTMLAnchorElement;\n/**\n * @returns `true` if the target is an instance of HTMLImageElement type.\n * @param target\n */\nexport const isHTMLImageElement = (target) => target instanceof HTMLImageElement;\n/**\n * @returns `true` if the target is an instance of HTMLOptionElement type.\n * @param target\n */\nexport const isHTMLOptionElement = (target) => target instanceof HTMLOptionElement;\n/**\n * @returns `true` if the target is an instance of HTMLButtonElement type.\n * @param target\n */\nexport const isHTMLButtonElement = (target) => target instanceof HTMLButtonElement;\n", "/**\n * Dispatches a custom event that bubbles from the target.\n * @param target The element where the event will originate.\n * @param events The event name or an array of event names.\n * @returns True if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise.\n */\nexport const simulateEvent = (target, events) => {\n    if (!Array.isArray(events))\n        events = [events];\n    const eventsSuccess = events.map((event) => target.dispatchEvent(new Event(event, { bubbles: true })));\n    return eventsSuccess.every((success) => success);\n};\n", "import { isHTMLInputElement } from '..';\nimport { simulateEvent } from '.';\n/**\n * Sets a value to a FormField element and emits `click`, `input` and `change` Events.\n *\n * @param element The FormField to update.\n * @param value `boolean` for Checkboxes and Radios, `string` for the rest.\n */\nexport const setFormFieldValue = (element, value) => {\n    const { type } = element;\n    const isRadio = type === 'radio';\n    const isCheckbox = type === 'checkbox';\n    if (isRadio || isCheckbox) {\n        if (!isHTMLInputElement(element) ||\n            typeof value !== 'boolean' ||\n            value === element.checked ||\n            (isRadio && value === false)) {\n            return;\n        }\n        element.checked = value;\n    }\n    else {\n        if (element.value === value)\n            return;\n        element.value = value.toString();\n    }\n    // Emit DOM events\n    simulateEvent(element, ['click', 'input', 'change']);\n};\n", "/**\n * Get the locale from the URL\n * @returns {object} locale\n */\n\ntype Locale = {\n  country: string;\n  isoCode: string;\n};\n\nexport const getLocale = function () {\n  const path = window.location.pathname.slice(1, 3);\n  let locale: Locale = { country: 'International', isoCode: 'en' };\n\n  if (path === 'no') locale = { country: 'Norway', isoCode: 'no' };\n  if (path === 'sv') locale = { country: 'Sweden', isoCode: 'sv' };\n  if (path === 'fi') locale = { country: 'Finland', isoCode: 'fi' };\n\n  return locale;\n};\n", "import { setFormFieldValue } from '@finsweet/ts-utils';\n\nimport { getLocale } from '$utils/getLocaleFromPath';\n\nwindow.Webflow = window.Webflow || [];\nwindow.Webflow.push(async () => {\n  // get the locale from the URL\n  const { country } = getLocale();\n\n  // select all form fields with data-default-input-value=\"locale\" attribute\n  const localeFormFieldInputs: NodeListOf<HTMLInputElement> = document.querySelectorAll(\n    '[data-default-input-value=\"locale\"]'\n  );\n\n  // set the default value of each form field to the locale\n  localeFormFieldInputs.forEach((input) => {\n    setFormFieldValue(input, country);\n  });\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,iCAAsB,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACwBtF,MAAM,qBAAqB,CAAC,WAAW,kBAAkB;;;AClBzD,MAAM,gBAAgB,CAAC,QAAQ,WAAW;AAC7C,QAAI,CAAC,MAAM,QAAQ,MAAM;AACrB,eAAS,CAAC,MAAM;AACpB,UAAM,gBAAgB,OAAO,IAAI,CAAC,UAAU,OAAO,cAAc,IAAI,MAAM,OAAO,EAAE,SAAS,KAAK,CAAC,CAAC,CAAC;AACrG,WAAO,cAAc,MAAM,CAAC,YAAY,OAAO;AAAA,EACnD;;;ACHO,MAAM,oBAAoB,CAAC,SAAS,UAAU;AACjD,UAAM,EAAE,KAAK,IAAI;AACjB,UAAM,UAAU,SAAS;AACzB,UAAM,aAAa,SAAS;AAC5B,QAAI,WAAW,YAAY;AACvB,UAAI,CAAC,mBAAmB,OAAO,KAC3B,OAAO,UAAU,aACjB,UAAU,QAAQ,WACjB,WAAW,UAAU,OAAQ;AAC9B;AAAA,MACJ;AACA,cAAQ,UAAU;AAAA,IACtB,OACK;AACD,UAAI,QAAQ,UAAU;AAClB;AACJ,cAAQ,QAAQ,MAAM,SAAS;AAAA,IACnC;AAEA,kBAAc,SAAS,CAAC,SAAS,SAAS,QAAQ,CAAC;AAAA,EACvD;;;AClBO,MAAM,YAAY,WAAY;AACnC,UAAM,OAAO,OAAO,SAAS,SAAS,MAAM,GAAG,CAAC;AAChD,QAAI,SAAiB,EAAE,SAAS,iBAAiB,SAAS,KAAK;AAE/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,UAAU,SAAS,KAAK;AAC/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,UAAU,SAAS,KAAK;AAC/D,QAAI,SAAS;AAAM,eAAS,EAAE,SAAS,WAAW,SAAS,KAAK;AAEhE,WAAO;AAAA,EACT;;;ACfA,SAAO,UAAU,OAAO,WAAW,CAAC;AACpC,SAAO,QAAQ,KAAK,YAAY;AAE9B,UAAM,EAAE,QAAQ,IAAI,UAAU;AAG9B,UAAM,wBAAsD,SAAS;AAAA,MACnE;AAAA,IACF;AAGA,0BAAsB,QAAQ,CAAC,UAAU;AACvC,wBAAkB,OAAO,OAAO;AAAA,IAClC,CAAC;AAAA,EACH,CAAC;",
  "names": []
}
